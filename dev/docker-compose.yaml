version: "3"

services:
  main-server:
    container_name: "main-server"
    build:
      context: ../server/TimLearning
      dockerfile: ../dev/Dockerfile.Main
    environment:
      - DataEncryptor__SharedKey=RekNJutYABVCcezlI8gJSaXITQeUQq6kAmaZgRyY
      - DbConnectionStrings__Postgres=${MAIN_SERVER_POSTGRES_CONNECTION}
      - TimLearningSite__Url=${FRONTEND_PUBLIC_BASE_URL}
      - Mail__Server=smtp.yandex.ru
      - Mail__Port=465
      - Mail__UserName=Поддержка TimLearning
      - Mail__UserMail=
      - Mail__Password=
      - Mail__UseSsl=true
      - JwtSecret__Key=vIQ1VNG92op9V28eAbgvrofWlkGbZx0xCpZhSZst4Fb9vAYAnfj5v410q67MZsKSwX31g8M8zQb97JSR
      - S3__ServiceUrl=${S3_INTERNAL_BASE_URL}
      - S3__AccessKey=${S3_ACCESS_KEY}
      - S3__SecretKey=${S3_SECRET_KEY}
      - S3__BucketName=${S3_TIM_LEARNING_BUCKET}
      - DockerManagerApi__Url=${DOCKER_MANAGER_SERVER_INTERNAL_BASE_URL}
    ports:
      - ${MAIN_SERVER_PUBLIC_HTTP_PORT}:8080
    depends_on:
      postgres:
        condition: service_healthy
      s3-buckets-creator:
        condition: service_completed_successfully
      docker-manager:
        condition: service_started

  docker-manager:
    container_name: "docker-manager"
    build:
      context: ../server/TimLearning
      dockerfile: ../dev/Dockerfile.DockerManager
    environment:
      - Docker__Url=${DOCKER_INTERNAL_BASE_URL}
    ports:
      - 5002:${DOCKER_MANAGER_SERVER_INTERNAL_HTTP_PORT}
    depends_on:
      docker-dind:
        condition: service_started

  frontend:
    container_name: "frontend"
    build:
      args:
        - REACT_APP_API_URL=${MAIN_SERVER_PUBLIC_BASE_URL}
      context: ../client
      dockerfile: dockerfile
    ports:
      - ${FRONTEND_PUBLIC_PORT}:80
    volumes:
      - ./nginx/app.conf:/etc/nginx/conf.d/default.conf

  postgres:
    container_name: "postgres"
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    ports:
      - 54320:${POSTGRES_INTERNAL_PORT}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5

  s3:
    container_name: "s3"
    image: minio/minio
    command: server --console-address ":9001" /data/
    ports:
      - 9000:${S3_INTERNAL_PORT}
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
    volumes:
      - minio-storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "${S3_INTERNAL_BASE_URL}/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5

  s3-buckets-creator:
    container_name: "s3-buckets-creator"
    image: minio/mc
    depends_on:
      s3:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio ${S3_INTERNAL_BASE_URL} ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      /usr/bin/mc mb myminio/${S3_TIM_LEARNING_BUCKET};
      /usr/bin/mc anonymous set private myminio/${S3_TIM_LEARNING_BUCKET};
      exit 0;
      "

  docker-dind:
    container_name: "docker-dind"
    image: docker:dind
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=
    ports:
      - 2375:${DOCKER_INTERNAL_PORT}
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "${DOCKER_INTERNAL_BASE_URL}/_ping"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 5

volumes:
  db-data:
  minio-storage:
