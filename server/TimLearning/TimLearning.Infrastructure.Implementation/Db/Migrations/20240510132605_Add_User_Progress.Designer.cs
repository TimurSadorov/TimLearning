// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimLearning.Infrastructure.Implementation.Db;

#nullable disable

namespace TimLearning.Infrastructure.Implementation.Db.Migrations
{
    [DbContext(typeof(AppAppDbContext))]
    [Migration("20240510132605_Add_User_Progress")]
    partial class Add_User_Progress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TimLearning.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppArchiveId")
                        .HasColumnType("uuid");

                    b.Property<string>("AppContainerData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("RelativePathToDockerfile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RelativePathToInsertCode")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ServiceApps")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("StandardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppArchiveId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NextLessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("NextLessonId")
                        .IsUnique();

                    b.ToTable("Lessons", t =>
                        {
                            t.HasCheckConstraint("CK_Lesson_DeletedHasNextLessonWithNull", " \"IsDeleted\" = false or \"IsDeleted\" = true and \"NextLessonId\" is null ");
                        });
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "Order")
                        .IsUnique();

                    b.ToTable("Modules", t =>
                        {
                            t.HasCheckConstraint("CK_Modules_NotNegativeOrder", "\"Order\" > 0");

                            t.HasCheckConstraint("CK_Modules_OrderHasValue", "(\"IsDeleted\" = false and \"Order\" is not null) or (\"IsDeleted\" = true and \"Order\" is null)");
                        });
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.StoredFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.ToTable("StoredFiles");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.UserProgress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("UserProgresses");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Type", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("TimLearning.Domain.Entities.StoredFile", "AppArchive")
                        .WithMany()
                        .HasForeignKey("AppArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppArchive");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("TimLearning.Domain.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId");

                    b.HasOne("TimLearning.Domain.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimLearning.Domain.Entities.Lesson", "NextLesson")
                        .WithOne("PreviousLesson")
                        .HasForeignKey("TimLearning.Domain.Entities.Lesson", "NextLessonId");

                    b.Navigation("Exercise");

                    b.Navigation("Module");

                    b.Navigation("NextLesson");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Module", b =>
                {
                    b.HasOne("TimLearning.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.StoredFile", b =>
                {
                    b.HasOne("TimLearning.Domain.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.UserProgress", b =>
                {
                    b.HasOne("TimLearning.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserProgresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimLearning.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TimLearning.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("PreviousLesson");

                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("TimLearning.Domain.Entities.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
